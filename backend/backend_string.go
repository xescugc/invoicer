// Code generated by "enumer -type=Backend -output=backend_string.go"; DO NOT EDIT.

package backend

import (
	"fmt"
)

const _BackendName = "FS"

var _BackendIndex = [...]uint8{0, 2}

const _BackendLowerName = "fs"

func (i Backend) String() string {
	if i < 0 || i >= Backend(len(_BackendIndex)-1) {
		return fmt.Sprintf("Backend(%d)", i)
	}
	return _BackendName[_BackendIndex[i]:_BackendIndex[i+1]]
}

var _BackendValues = []Backend{0}

var _BackendNameToValueMap = map[string]Backend{
	_BackendName[0:2]:      0,
	_BackendLowerName[0:2]: 0,
}

var _BackendNames = []string{
	_BackendName[0:2],
}

// BackendString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BackendString(s string) (Backend, error) {
	if val, ok := _BackendNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Backend values", s)
}

// BackendValues returns all values of the enum
func BackendValues() []Backend {
	return _BackendValues
}

// BackendStrings returns a slice of all String values of the enum
func BackendStrings() []string {
	strs := make([]string, len(_BackendNames))
	copy(strs, _BackendNames)
	return strs
}

// IsABackend returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Backend) IsABackend() bool {
	for _, v := range _BackendValues {
		if i == v {
			return true
		}
	}
	return false
}
