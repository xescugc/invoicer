// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/invoicer/user (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	user "github.com/xescugc/invoicer/user"
	reflect "reflect"
)

// UserRepository is a mock of Repository interface
type UserRepository struct {
	ctrl     *gomock.Controller
	recorder *UserRepositoryMockRecorder
}

// UserRepositoryMockRecorder is the mock recorder for UserRepository
type UserRepositoryMockRecorder struct {
	mock *UserRepository
}

// NewUserRepository creates a new mock instance
func NewUserRepository(ctrl *gomock.Controller) *UserRepository {
	mock := &UserRepository{ctrl: ctrl}
	mock.recorder = &UserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *UserRepository) EXPECT() *UserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *UserRepository) Create(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *UserRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*UserRepository)(nil).Create), arg0, arg1)
}

// Find mocks base method
func (m *UserRepository) Find(arg0 context.Context) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *UserRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*UserRepository)(nil).Find), arg0)
}

// Update mocks base method
func (m *UserRepository) Update(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *UserRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*UserRepository)(nil).Update), arg0, arg1)
}
