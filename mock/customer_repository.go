// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/invoicer/customer (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	customer "github.com/xescugc/invoicer/customer"
	reflect "reflect"
)

// CustomerRepository is a mock of Repository interface
type CustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *CustomerRepositoryMockRecorder
}

// CustomerRepositoryMockRecorder is the mock recorder for CustomerRepository
type CustomerRepositoryMockRecorder struct {
	mock *CustomerRepository
}

// NewCustomerRepository creates a new mock instance
func NewCustomerRepository(ctrl *gomock.Controller) *CustomerRepository {
	mock := &CustomerRepository{ctrl: ctrl}
	mock.recorder = &CustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *CustomerRepository) EXPECT() *CustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *CustomerRepository) Create(arg0 context.Context, arg1 *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *CustomerRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*CustomerRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *CustomerRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *CustomerRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*CustomerRepository)(nil).Delete), arg0, arg1)
}

// Filter mocks base method
func (m *CustomerRepository) Filter(arg0 context.Context) ([]*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].([]*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter
func (mr *CustomerRepositoryMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*CustomerRepository)(nil).Filter), arg0)
}

// Find mocks base method
func (m *CustomerRepository) Find(arg0 context.Context, arg1 string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *CustomerRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*CustomerRepository)(nil).Find), arg0, arg1)
}

// Update mocks base method
func (m *CustomerRepository) Update(arg0 context.Context, arg1 string, arg2 *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *CustomerRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*CustomerRepository)(nil).Update), arg0, arg1, arg2)
}
