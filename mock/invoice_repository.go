// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/invoicer/invoice (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	invoice "github.com/xescugc/invoicer/invoice"
	reflect "reflect"
)

// InvoiceRepository is a mock of Repository interface
type InvoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *InvoiceRepositoryMockRecorder
}

// InvoiceRepositoryMockRecorder is the mock recorder for InvoiceRepository
type InvoiceRepositoryMockRecorder struct {
	mock *InvoiceRepository
}

// NewInvoiceRepository creates a new mock instance
func NewInvoiceRepository(ctrl *gomock.Controller) *InvoiceRepository {
	mock := &InvoiceRepository{ctrl: ctrl}
	mock.recorder = &InvoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *InvoiceRepository) EXPECT() *InvoiceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *InvoiceRepository) Create(arg0 context.Context, arg1 *invoice.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *InvoiceRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*InvoiceRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *InvoiceRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *InvoiceRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*InvoiceRepository)(nil).Delete), arg0, arg1)
}

// Filter mocks base method
func (m *InvoiceRepository) Filter(arg0 context.Context) ([]*invoice.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].([]*invoice.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter
func (mr *InvoiceRepositoryMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*InvoiceRepository)(nil).Filter), arg0)
}

// Find mocks base method
func (m *InvoiceRepository) Find(arg0 context.Context, arg1 string) (*invoice.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*invoice.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *InvoiceRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*InvoiceRepository)(nil).Find), arg0, arg1)
}

// Update mocks base method
func (m *InvoiceRepository) Update(arg0 context.Context, arg1 string, arg2 *invoice.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *InvoiceRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*InvoiceRepository)(nil).Update), arg0, arg1, arg2)
}
